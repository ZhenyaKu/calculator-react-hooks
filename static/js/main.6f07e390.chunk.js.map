{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","calc","setCalc","result","setResult","ops","clearCalc","updateCalc","value","hasOperator","includes","hasOperatorWithoutResult","hasOperatorWithLastOperation","slice","eval","toString","createDigits","digits","i","push","onClick","calculate","delateLast","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"40BAGA,SAASA,MAAO,IAAD,UACWC,oDAAS,IADpB,oLACNC,KADM,cACAC,QADA,yBAEeF,oDAAS,IAFxB,qLAENG,OAFM,cAEEC,UAFF,cAIPC,IAAM,CAAC,IAAK,IAAK,IAAK,IAAK,KAE3BC,UAAY,WAChBF,UAAU,IACVF,QAAQ,KAGJK,WAAa,SAAbA,WAAaC,OACjB,IAAMC,YAAcJ,IAAIK,SAASF,OAC3BG,yBAA2BF,aAAwB,KAATR,KAC1CW,6BAA+BH,aAAeJ,IAAIK,SAAST,KAAKY,OAAO,IAEzEF,0BAA4BC,+BAIhCV,QAAQD,KAAOO,OAEVC,aACHL,UAAUU,KAAKb,KAAOO,OAAOO,cAI3BC,aAAe,WAGnB,IAFA,IAAMC,EAAS,GADU,WAGhBC,GACPD,EAAOE,KACL,qEACEC,QAAS,kBAAMb,WAAWW,EAAEH,aAD9B,SAGGG,GADIA,KAJFA,EAAI,EAAGA,EAAI,GAAIA,IAAM,EAArBA,GAUT,OAAOD,GAGHI,UAAY,SAAZA,YACJnB,QAAQY,KAAKb,MAAMc,aAGfO,WAAa,aAMnB,OACE,kEAAKC,UAAU,MAAf,SACE,mEAAKA,UAAU,aAAf,UACE,mEAAKA,UAAU,UAAf,UACGpB,OAAS,kFAAQA,OAAR,OAA0B,GACnCF,MAAQ,OAGX,mEAAKsB,UAAU,YAAf,UACE,qEAAQH,QAAS,kBAAMb,WAAW,MAAlC,eACA,qEAAQa,QAAS,kBAAMb,WAAW,MAAlC,eACA,qEAAQa,QAAS,kBAAMb,WAAW,MAAlC,eACA,qEAAQa,QAAS,kBAAMb,WAAW,MAAlC,eAEA,qEAAQa,QAASE,WAAjB,eACA,qEAAQF,QAASd,UAAjB,kBAGF,mEAAKiB,UAAU,SAAf,UACGP,eACD,qEAAQI,QAAS,kBAAMb,WAAW,MAAlC,eACA,qEAAQa,QAAS,kBAAMb,WAAW,MAAlC,eAEA,qEAAQa,QAASC,UAAjB,uBAQKtB,2B,gIC3EAyB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAACpC,EAAA,EAAD,MAEFqC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.6f07e390.chunk.js","sourcesContent":["import { useState } from 'react';\nimport './App.css';\n\nfunction App() {\n  const [calc, setCalc] = useState(\"\");\n  const [result, setResult] = useState(\"\");\n\n  const ops = ['/', '*', '+', '-', '.'];\n\n  const clearCalc = () => {\n    setResult('');\n    setCalc('');\n  }\n\n  const updateCalc = value => {\n    const hasOperator = ops.includes(value);\n    const hasOperatorWithoutResult = hasOperator && calc === '';\n    const hasOperatorWithLastOperation = hasOperator && ops.includes(calc.slice(-1));\n\n    if (hasOperatorWithoutResult || hasOperatorWithLastOperation) {\n      return;\n    }\n\n    setCalc(calc + value);\n\n    if (!hasOperator) {\n      setResult(eval(calc + value).toString())\n    }\n  }\n\n  const createDigits = () => {\n    const digits = [];\n\n    for (let i = 1; i < 10; i++) {\n      digits.push(\n        <button\n          onClick={() => updateCalc(i.toString())}\n          key={i}>\n          {i}\n        </button>\n      );\n    }\n\n    return digits;\n  }\n\n  const calculate = () => {\n    setCalc(eval(calc).toString())\n  }\n\n  const delateLast = () => {\n    if (calc === '') {\n      return;\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      <div className=\"calculator\">\n        <div className=\"display\">\n          {result ? <span>({result})</span> : ''}\n          {calc || \"0\"}\n        </div>\n\n        <div className=\"operators\">\n          <button onClick={() => updateCalc('/')}>/</button>\n          <button onClick={() => updateCalc('*')}>*</button>\n          <button onClick={() => updateCalc('+')}>+</button>\n          <button onClick={() => updateCalc('-')}>-</button>\n\n          <button onClick={delateLast}>D</button>\n          <button onClick={clearCalc}>C</button>\n        </div>\n\n        <div className=\"digits\">\n          {createDigits()}\n          <button onClick={() => updateCalc('0')}>0</button>\n          <button onClick={() => updateCalc('.')}>.</button>\n\n          <button onClick={calculate}>=</button>\n        </div>\n\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}